#include "GUI.h"
#include "../Courses/Course.h"
#include "../StudyPlan/AcademicYear.h"
#include <sstream>
#include <iostream>
#include"../Registrar.h" 
#include <fstream> 
#include<string> 
#include"../Rules.h"

GUI::GUI()
{ 
	pWind = new window(WindWidth, WindHeight,wx,wy);
	pWind->ChangeTitle(WindTitle);
	ClearDrawingArea();
	ClearStatusBar();
	CreateMenu();
}

void GUI::Open_Window(Course* P_course)
{
	int msg_x = 15;
	int msg_y = StatusBarHeight + 50;
	CourseInfo Course_Info = P_reg->getCourseInfo(P_course);
	p_Infowind = new window(W, L, Start, End);
	p_Infowind->ChangeTitle(InfowindTitle);
	p_Infowind->SetFont(20, BOLD, BY_NAME, "Arial");
	p_Infowind->SetPen(MsgColor);
	p_Infowind->DrawString(msg_x, L - msg_y, Course_Info.Code);
	p_Infowind->DrawString(msg_x, L - msg_y, Course_Info.Title);
	stringstream int_to_string;  //here,I am changing the credits from int to be string.
	int_to_string << Course_Info.Credits;
	string str = int_to_string.str();
	p_Infowind->DrawString(msg_x, L - msg_y, str);
	for (auto prereq = Course_Info.PreReqList.begin(); prereq != Course_Info.PreReqList.end(); ++prereq)
	{
		p_Infowind->DrawString(msg_x, L - msg_y, *prereq);
	}
	for (auto coreq = Course_Info.CoReqList.begin(); coreq != Course_Info.CoReqList.end(); ++coreq)
	{
		p_Infowind->DrawString(msg_x, L - msg_y, *coreq);

	}


}
//Clears the status bar
void GUI::ClearDrawingArea() const
{
	pWind->SetBrush(BkGrndColor);
	pWind->SetPen(BkGrndColor);
	pWind->DrawRectangle(0, MenuBarHeight, WindWidth, WindHeight -StatusBarHeight);

}

void GUI::ClearStatusBar() const
{
	pWind->SetBrush(StatusBarColor);
	pWind->SetPen(StatusBarColor);
	pWind->DrawRectangle(0, WindHeight - StatusBarHeight, WindWidth, WindHeight);
}

void GUI::CreateMenu() const
{
	pWind->SetBrush(StatusBarColor);
	pWind->SetPen(StatusBarColor);
	pWind->DrawRectangle(0, 0, WindWidth, MenuBarHeight);

	//You can draw the menu icons any way you want.

	//First prepare List of images paths for menu item
	string MenuItemImages[ITM_CNT];
	MenuItemImages[ITM_ADD] = "GUI\\Images\\Menu\\Menu_add_course.jpg";
	MenuItemImages[ITM_Drag] = "GUI\\Images\\Menu\\Menu_drag_drop.jpg";
	MenuItemImages[ITM_LOAD] = "GUI\\Images\\Menu\\Menu_load.jpg";
	MenuItemImages[ITM_LOAD_RULES] = "GUI\\Images\\Menu\\Menu_load_rules.jpg";
	MenuItemImages[ITM_MINOR] = "GUI\\Images\\Menu\\MINOR.jpg";
	MenuItemImages[COURSE_STATUS] = "GUI\\Images\\Menu\\status.jpg";
	MenuItemImages[GPA_CALCULATOR] = "GUI\\Images\\Menu\\GPA.jpg";
	MenuItemImages[STUDENT_LEVEL] = "GUI\\Images\\Menu\\student_level.jpg";
	MenuItemImages[ITM_SAVE] = "GUI\\Images\\Menu\\Menu_SAVE.jpg";
	MenuItemImages[ITM_EXIT] = "GUI\\Images\\Menu\\Menu_Exit.jpg";

	//TODO: Prepare image for each menu item and add it to the list

	//Draw menu items one image at a time
	for (int i = 0; i<ITM_CNT; i++)
		pWind->DrawImage(MenuItemImages[i], i*MenuItemWidth, 0, MenuItemWidth, MenuBarHeight);
}

////////////////////////    Output functions    ///////////////////

//Prints a message on the status bar
void GUI::PrintMsg(string msg) const
{
	ClearStatusBar();	//Clear Status bar to print message on it
						// Set the Message offset from the Status Bar
	int MsgX = 25;
	int MsgY = StatusBarHeight - 10;

	// Print the Message
	pWind->SetFont(20, BOLD , BY_NAME, "Arial");
	pWind->SetPen(MsgColor);
	pWind->DrawString(MsgX, WindHeight - MsgY, msg);
}

//////////////////////////////////////////////////////////////////////////
void GUI::UpdateInterface() const
{
	
	pWind->SetBuffering(true);
	//Redraw everything
	CreateMenu();
	ClearStatusBar();
	ClearDrawingArea();
	pWind->UpdateBuffer();

	pWind->SetBuffering(false);

}

////////////////////////    Drawing functions    ///////////////////
void GUI::DrawCourse(const Course* pCrs)
{
	if (pCrs->isSelected())
		pWind->SetPen(HiColor, 2);
	else
	pWind->SetPen(DrawColor, 2);
	pWind->SetBrush(pCrs->Get_course_color());  // FillColor
	graphicsInfo gInfo = pCrs->getGfxInfo();
	pWind->DrawRectangle(gInfo.x, gInfo.y, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT);
	pWind->DrawLine(gInfo.x, gInfo.y + CRS_HEIGHT / 2, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT / 2);
	
	//Write the course code and credit hours.
	int Code_x = gInfo.x + CRS_WIDTH * 0.15;
	int Code_y = gInfo.y + CRS_HEIGHT * 0.05;
	pWind->SetFont(CRS_HEIGHT * 0.4, BOLD , BY_NAME, "Gramound");
	pWind->SetPen(MsgColor);

	ostringstream crd;
	crd<< "crd:" << pCrs->getCredits();
	pWind->DrawString(Code_x, Code_y, pCrs->getCode());
	pWind->DrawString(Code_x, Code_y + CRS_HEIGHT/2, crd.str());
}

void GUI::Change_Course_Color(/*const Course* pCrs*/)
{
	pWind->SetPen(RED, 2);
	pWind->SetBrush(RED);
	//graphicsInfo gInfo = pCrs->getGfxInfo();
	//pWind->DrawRectangle(gInfo.x, gInfo.y, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT);
}

graphicsInfo GUI::DragCourse(const Course* pCrs) const
{
	// Flush out the input queues before beginning
	pWind->FlushMouseQueue();
	pWind->FlushKeyQueue();
	bool bDragging = false;
	int iX = 0, iY = 0;
	int iXOld = 0;
	int iYOld = 0;
	graphicsInfo gInfo = pCrs->getGfxInfo();
	char cKeyData;
	// Loop until there escape is pressed
	//while (pWind->GetKeyPress(cKeyData) != ESCAPE)
	while(true)
	{
		// Dragging voodoo
		if (bDragging == false) {
			if (pWind->GetButtonState(LEFT_BUTTON, iX, iY) == BUTTON_DOWN) {
				if (((iX > gInfo.x) && (iX < (gInfo.x + CRS_WIDTH))) && ((iY > gInfo.y) && (iY < (gInfo.y + CRS_HEIGHT)))) {
					bDragging = true;
					iXOld = iX; iYOld = iY;
					pWind->SetPen(BkGrndColor);
					pWind->SetBrush(BkGrndColor);
					pWind->DrawRectangle(gInfo.x, gInfo.y, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT);
					pWind->DrawLine(gInfo.x, gInfo.y + CRS_HEIGHT / 2, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT / 2);
				}
			}
		}
		else {
			if (pWind->GetButtonState(LEFT_BUTTON, iX, iY) == BUTTON_UP) {
				bDragging = false;
				pWind->SetPen(DrawColor, 2);
				pWind->SetBrush(FillColor);
				pWind->DrawRectangle(gInfo.x, gInfo.y, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT);
				pWind->DrawLine(gInfo.x, gInfo.y + CRS_HEIGHT / 2, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT / 2);

				//Write the course code and credit hours.
				int Code_x = gInfo.x + CRS_WIDTH * 0.15;
				int Code_y = gInfo.y + CRS_HEIGHT * 0.05;
				pWind->SetFont(CRS_HEIGHT * 0.4, BOLD, BY_NAME, "Gramound");
				pWind->SetPen(MsgColor);

				ostringstream crd;
				crd << "crd:" << pCrs->getCredits();
				pWind->DrawString(Code_x, Code_y, pCrs->getCode());
				pWind->DrawString(Code_x, Code_y + CRS_HEIGHT / 2, crd.str());
				//pCrs->setGfxInfo(gInfo);  
				return {(gInfo.x + 50),(gInfo.y + 20)};
			}
			else {
				if (iX != iXOld) {
					pWind->SetPen(BkGrndColor);
					pWind->SetBrush(BkGrndColor);
					pWind->DrawRectangle(gInfo.x, gInfo.y, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT);
					pWind->DrawLine(gInfo.x, gInfo.y + CRS_HEIGHT / 2, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT / 2);

					gInfo.x = gInfo.x + (iX - iXOld);
					iXOld = iX;
				}
				if (iY != iYOld) {
					pWind->SetPen(BkGrndColor);
					pWind->SetBrush(BkGrndColor);
					pWind->DrawRectangle(gInfo.x, gInfo.y, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT);
					pWind->DrawLine(gInfo.x, gInfo.y + CRS_HEIGHT / 2, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT / 2);

					gInfo.y = gInfo.y + (iY - iYOld);
					iYOld = iY;
				}
				pWind->SetPen(DrawColor, 2);
				pWind->SetBrush(FillColor);
				pWind->DrawRectangle(gInfo.x, gInfo.y, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT);
				pWind->DrawLine(gInfo.x, gInfo.y + CRS_HEIGHT / 2, gInfo.x + CRS_WIDTH, gInfo.y + CRS_HEIGHT / 2);

				//Write the course code and credit hours.
				int Code_x = gInfo.x + CRS_WIDTH * 0.15;
				int Code_y = gInfo.y + CRS_HEIGHT * 0.05;
				pWind->SetFont(CRS_HEIGHT * 0.4, BOLD, BY_NAME, "Gramound");
				pWind->SetPen(MsgColor);

				ostringstream crd;
				crd << "crd:" << pCrs->getCredits();
				pWind->DrawString(Code_x, Code_y, pCrs->getCode());
				pWind->DrawString(Code_x, Code_y + CRS_HEIGHT / 2, crd.str());
			}

		}
	}
} 
////////////////////////////////////////////////////////////////////////////
/*
void GUI::DrawAcademicYear(const AcademicYear* pY) 
{
	graphicsInfo gInfo = pY->getGfxInfo();

	///TODO: compelete this function to:
	//		1- Draw a rectangle for the academic year 
	//		2- Draw a sub-rectangle for each semester
	//Then each course should be drawn inside rect of its year/sem

	//pWind->SetFont(16, 2, ROMAN);
	//pWind->DrawString(4, WindHeight - StatusBarHeight - 6 - YearHeight * i - 50, year);
	//pWind->DrawRectangle(0, WindHeight - StatusBarHeight - 12 - YearHeight * i, 60, WindHeight - StatusBarHeight - YearHeight - YearHeight * (i + 2), FRAME, 7, 7);
	pWind->SetPen(GREEN, 2);
	for (int i = 0; i < 12; i++)
	{
		pWind->DrawLine(0, WindHeight - StatusBarHeight - 50 * i, WindWidth, WindHeight - StatusBarHeight - 50 * i);
	}

} */
/////////////////////////== Needs Modification ==//////////////////////////////////////////////////////////////////////////////////
void GUI::DrawAcademicYear(const AcademicYear* pY)
{
	graphicsInfo gInfo = pY->getGfxInfo();

	///TODO: compelete this function to:
	// 1- Draw a rectangle for the academic year
	pWind->SetBrush(BACKGROUND_RED);
	pWind->SetPen(BLACK, 2);
	int x1 = 0;
	int x2 = 50;
	int x3 = 100;
	int y = 40;
	string year = "";
	string semester = "";
	pWind->SetPen(BLACK);
	for (int i = 0; i < 4; i++)
	{
	pWind->SetFont(16, 2, ROMAN);
	pWind->DrawString(x1 + 8 , WindHeight - StatusBarHeight - i*3*y - 20 , "Year"+ to_string(i+1));
	pWind->DrawRectangle(x1 , WindHeight -  StatusBarHeight - i*3*y, x2, WindHeight - StatusBarHeight - (i*3+3) * y, FRAME, 7, 7);
	}
	pWind->SetFont(16, 2, ROMAN);
	pWind->DrawString(x1 + 8, WindHeight - StatusBarHeight - 4 * 3 * y - 20, "Year" + to_string(4 + 1));
	pWind->DrawRectangle(x1, WindHeight -  StatusBarHeight - 4 * 3 * y, x2, WindHeight - StatusBarHeight - (4 * 3 + 2) * y, FRAME, 7, 7);
	
	pWind->SetPen(BLUE);
	for (int i = 0; i < 4*3; i++)
	{
		string semester;
		int x_space;
		if (i % 3 == 0)
		{
			semester = "Fall";
			x_space = 8;
		}
		else if (i % 3 == 1)
		{
			semester = "Spring";
			x_space = 8;
		}
		else if (i % 3 == 2)
		{
			semester = "Summer";
			x_space = 2;
		}

		pWind->SetFont(15, 1, ROMAN);
		pWind->DrawString(x2 + x_space, WindHeight - StatusBarHeight - i * y - 20, semester); ////
		pWind->DrawLine(x3,WindHeight - StatusBarHeight - i * y , WindWidth, WindHeight - StatusBarHeight - i * y);
		pWind->DrawRectangle(x2, WindHeight - StatusBarHeight - i * y, x3, WindHeight - StatusBarHeight - (i + 1) * y, FRAME, 7, 7);
	}
	pWind->SetFont(15, 1, ROMAN);
	pWind->DrawString(x2 + 8, WindHeight - StatusBarHeight - 4 * 3 * y - 20, "Fall");
	pWind->DrawLine(x3, WindHeight - StatusBarHeight - 4 * 3 * y, WindWidth, WindHeight - StatusBarHeight - 4 * 3 * y);
	pWind->DrawRectangle(x2, WindHeight - StatusBarHeight - 4 * 3 * y, x3, WindHeight - StatusBarHeight - (4 * 3 + 1) * y, FRAME, 7, 7);
	pWind->DrawString(x2 + 8, WindHeight - StatusBarHeight - (4 * 3 + 1 ) * y - 20, "Spring");
	pWind->DrawLine(x3, WindHeight - StatusBarHeight - (4 * 3 + 1) * y, WindWidth, WindHeight - StatusBarHeight - (4 * 3 + 1) * y);
	pWind->DrawRectangle(x2, WindHeight  - StatusBarHeight - (4 * 3 + 1 )* y, x3, WindHeight - StatusBarHeight - (4 * 3 + 2) * y, FRAME, 7, 7);
	pWind->DrawLine(x3, WindHeight - StatusBarHeight - (4 * 3 + 2) * y, WindWidth, WindHeight - StatusBarHeight - (4 * 3 + 2) * y);
}

////////////////////////    Input functions    ///////////////////
//This function reads the position where the user clicks to determine the desired action
//If action is done by mouse, actData will be the filled by mouse position
ActionData GUI::GetUserAction(string msg) const
{
	keytype ktInput;
	clicktype ctInput;
	char cKeyData;

	
	// Flush out the input queues before beginning
	pWind->FlushMouseQueue();
	pWind->FlushKeyQueue();
	
	PrintMsg(msg);

	while (true)
	{
		int x, y;
		ctInput = pWind->GetMouseClick(x, y);	//Get the coordinates of the user click
		ktInput = pWind->GetKeyPress(cKeyData);

		if (ktInput == ESCAPE)	//if ESC is pressed,return CANCEL action
		{
			return ActionData{ CANCEL };
		}

		
		if (ctInput == LEFT_CLICK)	//mouse left click
		{
			//[1] If user clicks on the Menu bar
			if (y >= 0 && y < MenuBarHeight)
			{
				//Check whick Menu item was clicked
				//==> This assumes that menu items are lined up horizontally <==
				int ClickedItemOrder = (x / MenuItemWidth);
				//Divide x coord of the point clicked by the menu item width (int division)
				//if division result is 0 ==> first item is clicked, if 1 ==> 2nd item and so on

				switch (ClickedItemOrder)
				{
				case ITM_ADD: return ActionData{ ADD_CRS };	//Add course
				case ITM_Drag: return ActionData{ Drag_Drop };
				case ITM_LOAD: return ActionData{ LOAD };
				case ITM_LOAD_RULES: return ActionData{ LOAD_RULES };
				case ITM_MINOR: return ActionData{ ADD_MINOR };
				case COURSE_STATUS: return ActionData{ Course_Status };
				case GPA_CALCULATOR: return ActionData{ GPA_Calculator };
				case STUDENT_LEVEL: return ActionData{ Student_Level };
				case ITM_SAVE: return ActionData{ SAVE };   //save current plan
				case ITM_EXIT: return ActionData{ EXIT };		//Exit

				default: return ActionData{ MENU_BAR };	//A click on empty place in menu bar
				}
			}

			//[2] User clicks on the drawing area
			if (y >= MenuBarHeight && y < WindHeight - StatusBarHeight)
			{
				return ActionData{ DRAW_AREA,x,y };	//user want clicks inside drawing area
			}

			//[3] User clicks on the status bar
			return ActionData{ STATUS_BAR };
		}
	}//end while

}

string GUI::GetSrting() const
{
	//Reads a complete string from the user until the user presses "ENTER".
	//If the user presses "ESCAPE". This function should return an empty string.
	//"BACKSPACE" is also supported
	//User should see what he is typing at the status bar

	

	string userInput;
	char Key;
	while (1)
	{
		pWind->WaitKeyPress(Key);

		switch (Key)
		{
		case 27: //ESCAPE key is pressed
			PrintMsg("");
			return ""; //returns nothing as user has cancelled the input

		case 13:		//ENTER key is pressed
			return userInput;

		case 8:		//BackSpace is pressed
			if (userInput.size() > 0)
				userInput.resize(userInput.size() - 1);
			break;

		default:
			userInput += Key;
		};

		PrintMsg(userInput);
	}

}








GUI::~GUI()
{
	delete pWind;
	delete p_Infowind;
}
